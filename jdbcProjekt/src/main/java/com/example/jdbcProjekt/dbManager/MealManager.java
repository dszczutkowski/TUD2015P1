package com.example.jdbcProjekt.dbManager;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.example.jdbcProjekt.dbTable.*;

public class MealManager 
{
	private Connection connection;
	
	private String url = "jdbc:hsqldb:hsql://localhost/workdb";
	
	private String createTableMeal = "CREATE TABLE Meal(idMeal BIGINT UNIQUE GENERATED BY DEFAULT AS IDENTITY, "+
			"idClient BIGINT, name VARCHAR(30), amount INTEGER, price DECIMAL, "+
			"FOREIGN KEY (idClient) REFERENCES Client(idClient) ON DELETE CASCADE ON UPDATE CASCADE)";
	
	private PreparedStatement addMealStmt;
	private PreparedStatement deleteOneMealStmt;
	private PreparedStatement deleteAllMealsStmt;
	private PreparedStatement updateMealStmt;
	private PreparedStatement getAllMealsStmt;
	
	private Statement statement;
	
	public MealManager()
	{
		try 
		{
			connection = DriverManager.getConnection(url);
			statement = connection.createStatement();

			ResultSet rs = connection.getMetaData().getTables(null, null, null, null);
			boolean tableExists = false;
			boolean firstTableExists = false;
			while (rs.next()) 
			{
				if ("Meal".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
					tableExists = true;
					break;
				}
				if ("Client".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
					firstTableExists = true;
				}
			}

			if (!tableExists && firstTableExists)
				statement.executeUpdate(createTableMeal);

			addMealStmt = connection
					.prepareStatement("INSERT INTO Meal(idClient, name, amount, price) VALUES (?, ?, ?, ?)");
			deleteOneMealStmt = connection
					.prepareStatement("DELETE FROM Meal WHERE idMeal = ?");
			deleteAllMealsStmt = connection
					.prepareStatement("DELETE FROM Meal");
			updateMealStmt = connection
					.prepareStatement("UPDATE Meal SET idClient = ? WHERE idMeal = ?");
			getAllMealsStmt = connection
					.prepareStatement("SELECT idMeal, idClient, name, amount, price FROM Meal");
			
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	ClientManager clientManager = new ClientManager();
	
	public Connection getConnection()
	{
		return connection;
	}
	
	public int addMeal(Meal meal)
	{
		List<Client>clients = clientManager.getAllClients();
		Client clientRetrieved = clients.get(0);
		int count = 0;
		try
		{
			addMealStmt.setLong(1, clientRetrieved.getIdClient());
			addMealStmt.setString(2, meal.getName());
			addMealStmt.setInt(3, meal.getAmount());
			addMealStmt.setDouble(4, meal.getPrice());
			
			count = addMealStmt.executeUpdate();
		}
		catch (SQLException e)
		{
			e.printStackTrace();
		}
		return count;
	}
	
	public List<Meal>getAllMeals() {
		List<Meal>meals = new ArrayList<Meal>();

		try 
		{
			ResultSet rs = getAllMealsStmt.executeQuery();

			while (rs.next()) 
			{
				Meal meal = new Meal();
				meal.setIdMeal(rs.getInt("idMeal"));
				meal.setIdClient(rs.getLong("idClient"));
				meal.setName(rs.getString("name"));
				meal.setAmount(rs.getInt("amount"));
				meal.setPrice(rs.getDouble("price"));
				meals.add(meal);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return meals;
	}
	
	public void setKeyToNull(Meal meal)
	{
		try
		{
			updateMealStmt.setObject(1,  null);
			updateMealStmt.setLong(2, meal.getIdMeal());
			updateMealStmt.executeUpdate();
		}
		catch (SQLException e)
		{
			e.printStackTrace();
		}
	}
	
	void updateKey(Meal meal, Client client)
	{
		try
		{
			updateMealStmt.setLong(1, client.getIdClient());
			updateMealStmt.setLong(2, meal.getIdMeal());
			updateMealStmt.executeUpdate();
		}
		catch (SQLException e)
		{
			e.printStackTrace();
		}
	}
	
	public void removeMeals() throws SQLException
	{
		try
		{
			deleteAllMealsStmt.executeUpdate();
		} catch(SQLException e)
		{
			e.printStackTrace();
		}
	}
	
	public int removeOneMeal(Meal meal)
	{
		List<Client>clients = clientManager.getAllClients();
		Client clientRetrieved = clients.get(0);
		
		int count = 0;
		try
		{
			deleteOneMealStmt.setLong(1, clientRetrieved.getIdClient());
			count = deleteOneMealStmt.executeUpdate();
		}
		catch(SQLException e)
		{
			e.printStackTrace();
		}
		return count;
	}
	
	
}
